% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tex_sub.R
\name{sub_latex}
\alias{sub_latex}
\title{Substitute irregular yacas expressions}
\usage{
sub_latex(eq, objs, latex = TRUE, env = NULL)
}
\arguments{
\item{eq}{a \code{string} of the expression to solve i.e. \code{'s * a'} where
both \code{s} and \code{a} are the names of \code{ysym} objects which are in the
parent environment (\code{parent.frame()}) or in another enviroment
as referenced using the \code{env} argument}

\item{objs}{a \verb{vector or }scalar`}

\item{latex}{boolean for whether the output is rendered to latex using
the \code{Ryacas::tex()} function. If \code{FALSE} then a string of the operations}

\item{env}{the environment in which the\code{ysym} variables referenced in
\code{eq} exist. This defaults to the \code{parent.frame()} of where \code{sub_latex}
is called.}
}
\value{
A tex string of the output
}
\description{
Allows substitution of variables into \code{Ryacas} expressions without further operations
or simplification. The function allows operations on objects which are composed
of irregular variable names such as \verb{theta_\{x,z\}}.

The function can output in latex form so that the working out of an equation can
be shown as well as the final solution.
}
\examples{
library(Ryacas)
library(magrittr)

# create some `Ryacas` variables
sigma <-
sapply(c('x', 'y', 'z'), function(x)
 paste('sigma_{', c('x', 'y', 'z'), ',', x, '}', sep = '')) \%>\%
 ysym()

A <- c('A_1', 'A_2', 'A_3') \%>\%
ysym()

# create a string of the equation for substitution
eq <- 'sigma * A'

# create vector with variable names in
objs <- c('sigma', 'A')

# call the function to get the latex output of this
# unsolved equation
sub_latex(eq, objs)

# output a string of the output which can be converted to a
# `Ryacas` object
sub_latex(eq, objs, latex = TRUE)

}
